[[["a3029608-a8ce-4c62-882a-6eef7a8bea1c",{"pageContent":"# React + Vite\n\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n\nCurrently, two official plugins are available:\n\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n\n## Expanding the ESLint configuration\n\nIf you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.","metadata":{"source":"README.md","section":"","chunkIndex":0,"totalChunks":1,"timestamp":1749598056405}}],["eedc3f60-0080-49a4-ad32-99fbe9d4b4c9",{"pageContent":"{\n  \"name\": \"podcast-poc\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@heroicons/react\": \"^2.2.0\",\n    \"@langchain/community\": \"^0.3.45\",\n    \"@langchain/openai\": \"^0.5.12\",\n    \"@material-tailwind/react\": \"^2.1.10\",\n    \"audiobuffer-to-wav\": \"^1.0.0\",\n    \"file-saver\": \"^2.0.5\",\n    \"hnswlib-node\": \"^3.0.0\",\n    \"langchain\": \"^0.3.27\",\n    \"pdfjs-dist\": \"^5.3.31\",\n    \"react\": \"^19.1.0\",\n    \"react-dom\": \"^19.1.0\",\n    \"uuid\": \"^11.1.0\",\n    \"wavesurfer.js\": \"^7.9.5\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.25.0\",\n    \"@radix-ui/react-slot\": \"^1.2.3\",\n    \"@types/react\": \"^19.1.2\",\n    \"@types/react-dom\": \"^19.1.2\",\n    \"@vitejs/plugin-react\": \"^4.4.1\",\n    \"autoprefixer\": \"^10.4.21\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"eslint\": \"^9.25.0\",\n    \"eslint-plugin-react-hooks\": \"^5.2.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.19\",\n    \"globals\": \"^16.0.0\",\n    \"postcss\": \"^8.5.4\",\n    \"tailwind-merge\": \"^3.3.1\",\n    \"tailwindcss\": \"^3.4.17\",\n    \"vite\": \"^6.3.5\"\n  }\n}","metadata":{"source":"package.json","section":"","chunkIndex":0,"totalChunks":1,"timestamp":1749598056405}}],["779122b8-c2ed-4465-adfb-c91654e6288a",{"pageContent":"/**\n * @fileoverview Utility functions for validation\n */\n\nimport { PDF_CONFIG } from '../constants';\n\n/**\n * Validate PDF file\n * @param {File} file - File to validate\n * @returns {{isValid: boolean, error: string|null}} Validation result\n * \n * @example\n * const result = validatePDFFile(file);\n * if (!result.isValid) console.error(result.error);\n */\nexport function validatePDFFile(file) {\n  if (!file) {\n    return { isValid: false, error: 'No file provided' };\n  }\n\n  if (file.size > PDF_CONFIG.MAX_FILE_SIZE) {\n    return { \n      isValid: false, \n      error: `File too large. Maximum size: ${formatFileSize(PDF_CONFIG.MAX_FILE_SIZE)}` \n    };\n  }\n\n  if (!PDF_CONFIG.ACCEPTED_TYPES.includes(file.type)) {\n    return { \n      isValid: false, \n      error: 'Invalid file type. Only PDF files are accepted.' \n    };\n  }\n\n  return { isValid: true, error: null };\n}\n\n// Helper function to format file size\nfunction formatFileSize(bytes) {\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  if (bytes === 0) return '0 Bytes';\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n}","metadata":{"source":"src/utils/validation.js","section":"","chunkIndex":0,"totalChunks":1,"timestamp":1749598056405}}],["52d0a74c-0d6b-4f7b-87d7-471a5fede645",{"pageContent":"/**\n * @fileoverview Utility functions for formatting data\n */\n\n/**\n * Format file size in human-readable format\n * @param {number} bytes - File size in bytes\n * @param {number} [decimals=2] - Number of decimal places\n * @returns {string} Formatted file size\n * \n * @example\n * formatFileSize(1024) // \"1.00 KB\"\n * formatFileSize(1048576) // \"1.00 MB\"\n */\nexport function formatFileSize(bytes, decimals = 2) {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n\n/**\n * Format duration in MM:SS format\n * @param {number} seconds - Duration in seconds\n * @returns {string} Formatted duration\n * \n * @example\n * formatDuration(65) // \"01:05\"\n * formatDuration(3661) // \"61:01\"\n */\nexport function formatDuration(seconds) {\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n}","metadata":{"source":"src/utils/format.js","section":"","chunkIndex":0,"totalChunks":1,"timestamp":1749598056405}}],["cea6cfeb-4278-4581-8c10-edc1e4bb70ed",{"pageContent":"/**\n * @fileoverview PDF processing service\n */\n\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { PDF_CONFIG, ERROR_MESSAGES } from '../constants';\n\n// Configure PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = PDF_CONFIG.WORKER_SRC;\n\n/**\n * PDF processing service class\n */","metadata":{"source":"src/services/pdf.service.js","section":"","chunkIndex":0,"totalChunks":4,"timestamp":1749598056405}}],["0631b01a-f92c-48ca-a12b-ee487e52170b",{"pageContent":"export class PDFService {\n  /**\n   * Validate PDF file before processing\n   * @param {File} file - PDF file to validate\n   * @throws {Error} When file is invalid\n   */\n  validateFile(file) {\n    if (!file) {\n      throw new Error('No file provided');\n    }\n\n    if (file.size > PDF_CONFIG.MAX_FILE_SIZE) {\n      throw new Error(ERROR_MESSAGES.FILE_TOO_LARGE);\n    }\n\n    if (!PDF_CONFIG.ACCEPTED_TYPES.includes(file.type)) {\n      throw new Error(ERROR_MESSAGES.INVALID_FILE_TYPE);\n    }\n  }\n\n  /**\n   * Extract text from PDF file\n   * @param {File} file - PDF file to process\n   * @param {function} onProgress - Progress callback (optional)\n   * @returns {Promise<{content: string, pageCount: number, extractedAt: Date}>}\n   * @throws {Error} When extraction fails\n   */\n  async extractText(file, onProgress) {\n    this.validateFile(file);\n\n    try {\n      // Convert file to ArrayBuffer\n      const arrayBuffer = await file.arrayBuffer();\n      \n      // Load PDF document\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n      let fullText = '';\n\n      // Extract text from each page\n      for (let i = 1; i <= pdf.numPages; i++) {\n        const page = await pdf.getPage(i);\n        const textContent = await page.getTextContent();\n        \n        // Group items by line based on Y position\n        const lines = {};\n        textContent.items.forEach(item => {\n          const y = Math.round(item.transform[5]);\n          if (!lines[y]) lines[y] = [];\n          lines[y].push(item);\n        });\n        \n        // Sort lines and concatenate text\n        const sortedLines = Object.keys(lines).sort((a, b) => b - a);\n        const pageText = sortedLines.map(y => {\n          return lines[y]\n            .sort((a, b) => a.transform[4] - b.transform[4])\n            .map(item => item.str)\n            .join('')\n            .trim();\n        }).filter(line => line).join('\\n');\n        \n        fullText += pageText + '\\n\\n';","metadata":{"source":"src/services/pdf.service.js","section":"","chunkIndex":1,"totalChunks":4,"timestamp":1749598056405}}],["f0e73574-df68-42a3-ab50-cb9ee837c837",{"pageContent":"// Report progress if callback provided\n        if (onProgress) {\n          onProgress({\n            currentPage: i,\n            totalPages: pdf.numPages,\n            progress: (i / pdf.numPages) * 100\n          });\n        }\n      }\n\n      return {\n        content: fullText.trim(),\n        pageCount: pdf.numPages,\n        extractedAt: new Date()\n      };\n    } catch (error) {\n      console.error('PDF text extraction failed:', error);\n      throw new Error(ERROR_MESSAGES.PDF_PROCESSING);\n    }\n  }\n\n  /**\n   * Get PDF metadata\n   * @param {File} file - PDF file\n   * @returns {Promise<Object>} PDF metadata\n   */\n  async getMetadata(file) {\n    this.validateFile(file);\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n      const metadata = await pdf.getMetadata();\n\n      return {\n        pageCount: pdf.numPages,\n        title: metadata.info?.Title || 'Untitled',\n        author: metadata.info?.Author || 'Unknown',\n        subject: metadata.info?.Subject || '',\n        creator: metadata.info?.Creator || '',\n        producer: metadata.info?.Producer || '',\n        creationDate: metadata.info?.CreationDate || null,\n        modificationDate: metadata.info?.ModDate || null,\n      };\n    } catch (error) {\n      console.error('Failed to get PDF metadata:', error);\n      throw new Error('Failed to extract PDF metadata');\n    }\n  }\n}\n\n/**\n * Create PDF service instance\n * @returns {PDFService} Service instance\n */","metadata":{"source":"src/services/pdf.service.js","section":"","chunkIndex":2,"totalChunks":4,"timestamp":1749598056405}}],["30b89a88-212f-400e-955b-066d34b8f93a",{"pageContent":"export const createPDFService = () => {\n  return new PDFService();\n};","metadata":{"source":"src/services/pdf.service.js","section":"","chunkIndex":3,"totalChunks":4,"timestamp":1749598056405}}],["0915b136-bf56-461f-ae03-b333c2375dbf",{"pageContent":"/**\n * @fileoverview OpenAI API service layer\n */\n\nimport { ChatOpenAI } from '@langchain/openai';\nimport { HumanMessage, SystemMessage } from '@langchain/core/messages';\nimport { OPENAI_CONFIG, API_ENDPOINTS, ERROR_MESSAGES } from '../constants';\n\n/**\n * OpenAI service class for handling chat and transcription requests\n */","metadata":{"source":"src/services/openai.service.js","section":"","chunkIndex":0,"totalChunks":4,"timestamp":1749598056405}}],["40459c6e-7632-44a5-b144-36d4063bca6b",{"pageContent":"export class OpenAIService {\n  /**\n   * @param {string} apiKey - OpenAI API key\n   */\n  constructor(apiKey) {\n    this.apiKey = apiKey;\n    this.chatModel = null;\n  }\n\n  /**\n   * Initialize the chat model\n   * @private\n   */\n  _initChatModel() {\n    if (!this.chatModel) {\n      this.chatModel = new ChatOpenAI({\n        openAIApiKey: this.apiKey,\n        modelName: OPENAI_CONFIG.CHAT_MODEL,\n        temperature: OPENAI_CONFIG.TEMPERATURE,\n        streaming: true,\n      });\n    }\n    return this.chatModel;\n  }\n\n  /**\n   * Send a chat message with streaming response\n   * @param {string} prompt - User prompt\n   * @param {string} context - PDF context text\n   * @param {function} onChunk - Callback for each response chunk\n   * @returns {Promise<string>} Complete response text\n   * @throws {Error} When chat request fails\n   */\n  async sendChatMessage(prompt, context = '', onChunk) {\n    try {\n      const model = this._initChatModel();\n      \n      const messages = [\n        new SystemMessage(\n          context \n            ? `Você é um assistente útil. Aqui está o contexto do documento PDF extraído:\\n\\n${context.substring(0, OPENAI_CONFIG.MAX_CONTEXT_LENGTH)}...`\n            : 'Você é um assistente útil.'\n        ),\n        new HumanMessage(prompt)\n      ];\n\n      const stream = await model.stream(messages);\n      let fullResponse = '';\n      \n      for await (const chunk of stream) {\n        const content = chunk.content;\n        if (typeof content === 'string') {\n          fullResponse += content;\n          if (onChunk) {\n            onChunk(fullResponse);\n          }\n        }\n      }\n      \n      return fullResponse;\n    } catch (error) {\n      console.error('Chat request failed:', error);\n      throw new Error(ERROR_MESSAGES.CHAT_REQUEST_FAILED);\n    }\n  }","metadata":{"source":"src/services/openai.service.js","section":"","chunkIndex":1,"totalChunks":4,"timestamp":1749598056405}}],["987c9f0f-4c59-4939-ba48-fd99c84305f9",{"pageContent":"/**\n   * Transcribe audio using OpenAI Whisper\n   * @param {Blob} audioBlob - Audio data to transcribe\n   * @param {string} language - Language code (default: 'pt')\n   * @returns {Promise<string>} Transcribed text\n   * @throws {Error} When transcription fails\n   */\n  async transcribeAudio(audioBlob, language = 'pt') {\n    try {\n      const formData = new FormData();\n      formData.append('file', audioBlob, 'audio.webm');\n      formData.append('model', OPENAI_CONFIG.WHISPER_MODEL);\n      formData.append('language', language);\n\n      const response = await fetch(API_ENDPOINTS.OPENAI_TRANSCRIPTIONS, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.text || '';\n    } catch (error) {\n      console.error('Transcription failed:', error);\n      throw new Error(ERROR_MESSAGES.TRANSCRIPTION_FAILED);\n    }\n  }\n}\n\n/**\n * Create OpenAI service instance\n * @param {string} apiKey - OpenAI API key\n * @returns {OpenAIService} Service instance\n */","metadata":{"source":"src/services/openai.service.js","section":"","chunkIndex":2,"totalChunks":4,"timestamp":1749598056405}}],["3e97f6ec-2a56-4756-ab9e-bfe291526f78",{"pageContent":"export const createOpenAIService = (apiKey) => {\n  if (!apiKey) {\n    throw new Error('OpenAI API key is required');\n  }\n  return new OpenAIService(apiKey);\n};","metadata":{"source":"src/services/openai.service.js","section":"","chunkIndex":3,"totalChunks":4,"timestamp":1749598056405}}],["433a4554-95ba-4fc7-a2bd-b6e258e347e8",{"pageContent":"/**\n * @fileoverview Audio recording service\n */\n\nimport { AUDIO_CONFIG, ERROR_MESSAGES } from '../constants';\n\n/**\n * Audio recording service class\n */","metadata":{"source":"src/services/audio.service.js","section":"","chunkIndex":0,"totalChunks":5,"timestamp":1749598056405}}],["f20bdfe1-c4e5-4b46-bd7f-d2c0bcd6068d",{"pageContent":"export class AudioService {\n  constructor() {\n    this.mediaRecorder = null;\n    this.stream = null;\n    this.audioChunks = [];\n    this.onDataAvailable = null;\n    this.onStop = null;\n  }\n\n  /**\n   * Check if audio recording is supported\n   * @returns {boolean} Whether audio recording is supported\n   */\n  isSupported() {\n    return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia && window.MediaRecorder);\n  }\n\n  /**\n   * Request microphone permission\n   * @returns {Promise<boolean>} Whether permission was granted\n   */\n  async requestPermission() {\n    if (!this.isSupported()) {\n      throw new Error('Audio recording is not supported in this browser');\n    }\n\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia(AUDIO_CONFIG.CONSTRAINTS);\n      // Stop the stream immediately after getting permission\n      stream.getTracks().forEach(track => track.stop());\n      return true;\n    } catch (error) {\n      console.error('Microphone permission denied:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Start audio recording\n   * @param {Object} options - Recording options\n   * @param {function} options.onDataAvailable - Callback for data chunks\n   * @param {function} options.onStop - Callback when recording stops\n   * @param {function} options.onError - Callback for errors\n   * @returns {Promise<void>}\n   * @throws {Error} When recording fails to start\n   */\n  async startRecording({ onDataAvailable, onStop, onError } = {}) {\n    if (!this.isSupported()) {\n      throw new Error('Audio recording is not supported');\n    }\n\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia(AUDIO_CONFIG.CONSTRAINTS);\n      this.mediaRecorder = new MediaRecorder(this.stream, {\n        mimeType: AUDIO_CONFIG.AUDIO_TYPE\n      });\n\n      this.audioChunks = [];\n      this.onDataAvailable = onDataAvailable;\n      this.onStop = onStop;","metadata":{"source":"src/services/audio.service.js","section":"","chunkIndex":1,"totalChunks":5,"timestamp":1749598056405}}],["c09910ef-c66e-4353-9187-48d593df6077",{"pageContent":"this.audioChunks = [];\n      this.onDataAvailable = onDataAvailable;\n      this.onStop = onStop;\n\n      this.mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          this.audioChunks.push(event.data);\n          if (this.onDataAvailable) {\n            this.onDataAvailable(event.data);\n          }\n        }\n      };\n\n      this.mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(this.audioChunks, { type: AUDIO_CONFIG.AUDIO_TYPE });\n        if (this.onStop) {\n          this.onStop(audioBlob);\n        }\n        this.cleanup();\n      };\n\n      this.mediaRecorder.onerror = (event) => {\n        console.error('MediaRecorder error:', event.error);\n        if (onError) {\n          onError(event.error);\n        } else {\n          throw new Error(ERROR_MESSAGES.MICROPHONE_ACCESS);\n        }\n      };\n\n      this.mediaRecorder.start();\n\n      // Auto-stop after max recording time\n      setTimeout(() => {\n        if (this.isRecording()) {\n          this.stopRecording();\n        }\n      }, AUDIO_CONFIG.MAX_RECORDING_TIME);\n\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n      this.cleanup();\n      throw new Error(ERROR_MESSAGES.MICROPHONE_ACCESS);\n    }\n  }\n\n  /**\n   * Stop audio recording\n   * @returns {void}\n   */\n  stopRecording() {\n    if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\n      this.mediaRecorder.stop();\n    }\n  }\n\n  /**\n   * Check if currently recording\n   * @returns {boolean} Whether recording is active\n   */\n  isRecording() {\n    return this.mediaRecorder && this.mediaRecorder.state === 'recording';\n  }\n\n  /**\n   * Clean up resources\n   * @private\n   */\n  cleanup() {\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n      this.stream = null;\n    }\n    this.mediaRecorder = null;\n    this.audioChunks = [];\n  }","metadata":{"source":"src/services/audio.service.js","section":"","chunkIndex":2,"totalChunks":5,"timestamp":1749598056405}}],["eea43b53-c82a-4aef-aa62-279aeef2d827",{"pageContent":"/**\n   * Get recording duration in seconds\n   * @returns {number} Recording duration\n   */\n  getDuration() {\n    if (!this.mediaRecorder) return 0;\n    \n    // Estimate duration based on chunks (approximate)\n    return this.audioChunks.length * 0.1; // Rough estimate\n  }\n}\n\n/**\n * Create audio service instance\n * @returns {AudioService} Service instance\n */","metadata":{"source":"src/services/audio.service.js","section":"","chunkIndex":3,"totalChunks":5,"timestamp":1749598056405}}],["abbba4d3-86f6-489f-9314-7fd884587d65",{"pageContent":"export const createAudioService = () => {\n  return new AudioService();\n};","metadata":{"source":"src/services/audio.service.js","section":"","chunkIndex":4,"totalChunks":5,"timestamp":1749598056405}}],["8137be1e-c09d-40b9-8e2d-c8e81d8ee538",{"pageContent":"/**\n * @fileoverview Custom hook for PDF processing\n */\n\nimport { useState, useCallback, useMemo } from 'react';\nimport { createPDFService } from '../services/pdf.service';\n\n/**\n * Custom hook for PDF processing\n * @returns {Object} PDF utilities and state\n */","metadata":{"source":"src/hooks/usePDF.js","section":"","chunkIndex":0,"totalChunks":3,"timestamp":1749598056405}}],["50da80e8-ca18-42ce-b6ff-e80c3720aa94",{"pageContent":"export const usePDF = () => {\n  const [extractedText, setExtractedText] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n\n  // Memoize service instance\n  const pdfService = useMemo(() => createPDFService(), []);\n\n  /**\n   * Extract text from PDF file\n   * @param {File} file - PDF file to process\n   * @returns {Promise<Object>} Extracted text data\n   */\n  const extractText = useCallback(async (file) => {\n    setIsProcessing(true);\n    setProgress(0);\n    setError(null);\n\n    try {\n      const result = await pdfService.extractText(file, (progressData) => {\n        setProgress(progressData.progress);\n      });\n\n      setExtractedText(result);\n      return result;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsProcessing(false);\n      setProgress(0);\n    }\n  }, [pdfService]);\n\n  /**\n   * Get PDF metadata\n   * @param {File} file - PDF file\n   * @returns {Promise<Object>} PDF metadata\n   */\n  const getMetadata = useCallback(async (file) => {\n    try {\n      return await pdfService.getMetadata(file);\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [pdfService]);\n\n  /**\n   * Validate PDF file\n   * @param {File} file - PDF file to validate\n   * @returns {boolean} Whether file is valid\n   */\n  const validateFile = useCallback((file) => {\n    try {\n      pdfService.validateFile(file);\n      return true;\n    } catch (err) {\n      setError(err.message);\n      return false;\n    }\n  }, [pdfService]);\n\n  /**\n   * Clear extracted text and reset state\n   */\n  const clearText = useCallback(() => {\n    setExtractedText(null);\n    setProgress(0);\n    setError(null);\n  }, []);\n\n  /**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);","metadata":{"source":"src/hooks/usePDF.js","section":"","chunkIndex":1,"totalChunks":3,"timestamp":1749598056405}}],["269d873a-eadc-4ac6-82ee-c1a0dd9d6e70",{"pageContent":"/**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    extractText,\n    getMetadata,\n    validateFile,\n    clearText,\n    clearError,\n    extractedText,\n    isProcessing,\n    progress,\n    error,\n  };\n};","metadata":{"source":"src/hooks/usePDF.js","section":"","chunkIndex":2,"totalChunks":3,"timestamp":1749598056405}}],["56e4ee90-7a23-45b4-a81c-09ef5f690203",{"pageContent":"/**\n * @fileoverview Custom hook for OpenAI integration\n */\n\nimport { useState, useCallback, useMemo } from 'react';\nimport { createOpenAIService } from '../services/openai.service';\n\n/**\n * Custom hook for OpenAI chat and transcription\n * @param {string} apiKey - OpenAI API key\n * @returns {Object} OpenAI utilities and state\n */","metadata":{"source":"src/hooks/useOpenAI.js","section":"","chunkIndex":0,"totalChunks":2,"timestamp":1749598056405}}],["45f932a2-3d1c-4a4e-9448-b28a1c7ecbaa",{"pageContent":"export const useOpenAI = (apiKey) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Memoize service instance\n  const openAIService = useMemo(() => {\n    return apiKey ? createOpenAIService(apiKey) : null;\n  }, [apiKey]);\n\n  /**\n   * Send chat message with streaming\n   * @param {string} prompt - User prompt\n   * @param {string} context - PDF context\n   * @param {function} onChunk - Callback for response chunks\n   * @returns {Promise<string>} Complete response\n   */\n  const sendMessage = useCallback(async (prompt, context = '', onChunk) => {\n    if (!openAIService) {\n      throw new Error('OpenAI service not initialized');\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await openAIService.sendChatMessage(prompt, context, onChunk);\n      return response;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [openAIService]);\n\n  /**\n   * Transcribe audio to text\n   * @param {Blob} audioBlob - Audio data\n   * @param {string} language - Language code\n   * @returns {Promise<string>} Transcribed text\n   */\n  const transcribeAudio = useCallback(async (audioBlob, language = 'pt') => {\n    if (!openAIService) {\n      throw new Error('OpenAI service not initialized');\n    }\n\n    setIsTranscribing(true);\n    setError(null);\n\n    try {\n      const transcription = await openAIService.transcribeAudio(audioBlob, language);\n      return transcription;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setIsTranscribing(false);\n    }\n  }, [openAIService]);\n\n  /**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    sendMessage,\n    transcribeAudio,\n    clearError,\n    isLoading,\n    isTranscribing,\n    error,\n    isReady: !!openAIService,\n  };\n};","metadata":{"source":"src/hooks/useOpenAI.js","section":"","chunkIndex":1,"totalChunks":2,"timestamp":1749598056405}}],["c60dc729-0132-4ba2-a7c4-e12496819c18",{"pageContent":"/**\n * @fileoverview Custom hook for audio recording\n */\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport { createAudioService } from '../services/audio.service';\n\n/**\n * Custom hook for audio recording functionality\n * @returns {Object} Audio recording utilities and state\n */","metadata":{"source":"src/hooks/useAudioRecording.js","section":"","chunkIndex":0,"totalChunks":4,"timestamp":1749598056405}}],["fde629f2-1266-4203-be7f-2947e083ed56",{"pageContent":"export const useAudioRecording = () => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isSupported, setIsSupported] = useState(false);\n  const [hasPermission, setHasPermission] = useState(false);\n  const [duration, setDuration] = useState(0);\n  const [error, setError] = useState(null);\n\n  const audioServiceRef = useRef(null);\n  const durationIntervalRef = useRef(null);\n\n  // Initialize audio service\n  useEffect(() => {\n    audioServiceRef.current = createAudioService();\n    setIsSupported(audioServiceRef.current.isSupported());\n\n    return () => {\n      // Cleanup on unmount\n      if (audioServiceRef.current) {\n        audioServiceRef.current.cleanup?.();\n      }\n      if (durationIntervalRef.current) {\n        clearInterval(durationIntervalRef.current);\n      }\n    };\n  }, []);\n\n  /**\n   * Request microphone permission\n   * @returns {Promise<boolean>} Whether permission was granted\n   */\n  const requestPermission = useCallback(async () => {\n    if (!audioServiceRef.current) return false;\n\n    try {\n      const granted = await audioServiceRef.current.requestPermission();\n      setHasPermission(granted);\n      setError(null);\n      return granted;\n    } catch (err) {\n      setError(err.message);\n      return false;\n    }\n  }, []);\n\n  /**\n   * Start recording audio\n   * @param {Object} options - Recording options\n   * @param {function} options.onComplete - Callback when recording completes\n   * @param {function} options.onError - Callback for errors\n   * @returns {Promise<void>}\n   */\n  const startRecording = useCallback(async ({ onComplete, onError } = {}) => {\n    if (!audioServiceRef.current || !isSupported) {\n      const errorMsg = 'Audio recording is not supported';\n      setError(errorMsg);\n      if (onError) onError(new Error(errorMsg));\n      return;\n    }","metadata":{"source":"src/hooks/useAudioRecording.js","section":"","chunkIndex":1,"totalChunks":4,"timestamp":1749598056405}}],["316deeb6-acdf-400a-9ebb-99bbe2488407",{"pageContent":"// Request permission if not already granted\n    if (!hasPermission) {\n      const granted = await requestPermission();\n      if (!granted) {\n        const errorMsg = 'Microphone permission required';\n        setError(errorMsg);\n        if (onError) onError(new Error(errorMsg));\n        return;\n      }\n    }\n\n    try {\n      setError(null);\n      setDuration(0);\n      setIsRecording(true);\n\n      // Start duration counter\n      durationIntervalRef.current = setInterval(() => {\n        setDuration(prev => prev + 1);\n      }, 1000);\n\n      await audioServiceRef.current.startRecording({\n        onStop: (audioBlob) => {\n          setIsRecording(false);\n          if (durationIntervalRef.current) {\n            clearInterval(durationIntervalRef.current);\n          }\n          if (onComplete) {\n            onComplete(audioBlob);\n          }\n        },\n        onError: (err) => {\n          setIsRecording(false);\n          setError(err.message);\n          if (durationIntervalRef.current) {\n            clearInterval(durationIntervalRef.current);\n          }\n          if (onError) {\n            onError(err);\n          }\n        }\n      });\n    } catch (err) {\n      setIsRecording(false);\n      setError(err.message);\n      if (durationIntervalRef.current) {\n        clearInterval(durationIntervalRef.current);\n      }\n      if (onError) {\n        onError(err);\n      }\n    }\n  }, [isSupported, hasPermission, requestPermission]);\n\n  /**\n   * Stop recording audio\n   */\n  const stopRecording = useCallback(() => {\n    if (audioServiceRef.current && isRecording) {\n      audioServiceRef.current.stopRecording();\n    }\n  }, [isRecording]);\n\n  /**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);","metadata":{"source":"src/hooks/useAudioRecording.js","section":"","chunkIndex":2,"totalChunks":4,"timestamp":1749598056405}}],["16c4991a-ba35-4bed-88ae-cbc375ad1636",{"pageContent":"/**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  /**\n   * Format duration as MM:SS\n   * @param {number} seconds - Duration in seconds\n   * @returns {string} Formatted duration\n   */\n  const formatDuration = useCallback((seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  }, []);\n\n  return {\n    startRecording,\n    stopRecording,\n    requestPermission,\n    clearError,\n    formatDuration,\n    isRecording,\n    isSupported,\n    hasPermission,\n    duration,\n    error,\n  };\n};","metadata":{"source":"src/hooks/useAudioRecording.js","section":"","chunkIndex":3,"totalChunks":4,"timestamp":1749598056405}}],["c07cdf14-a28f-4bec-95b4-33b5a7fc53cf",{"pageContent":"/**\n * @fileoverview Application constants\n */\n\n/**\n * OpenAI API configuration\n */\nexport const OPENAI_CONFIG = {\n  CHAT_MODEL: 'gpt-4.1',\n  WHISPER_MODEL: 'whisper-1',\n  TEMPERATURE: 0,\n  MAX_TOKENS: 4000,\n};\n\n/**\n * API endpoints\n */\nexport const API_ENDPOINTS = {\n  OPENAI_CHAT: 'https://api.openai.com/v1/chat/completions',\n  OPENAI_TRANSCRIPTIONS: 'https://api.openai.com/v1/audio/transcriptions',\n};\n\n/**\n * PDF processing configuration\n */\nexport const PDF_CONFIG = {\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\n  ACCEPTED_TYPES: ['application/pdf'],\n  WORKER_SRC: '/pdf.worker.min.mjs',\n  MAX_TEXT_PREVIEW: 1000,\n  MAX_CONTEXT_LENGTH: 3000,\n};\n\n/**\n * Audio recording configuration\n */\nexport const AUDIO_CONFIG = {\n  AUDIO_TYPE: 'audio/webm',\n  CONSTRAINTS: {\n    audio: {\n      channelCount: 1,\n      sampleRate: 16000,\n    },\n  },\n  MAX_RECORDING_TIME: 5 * 60 * 1000, // 5 minutes\n};\n\n/**\n * UI constants\n */\nexport const UI_CONFIG = {\n  MAX_RESPONSE_HEIGHT: 'max-h-80',\n  SPINNER_SIZE: 'h-8 w-8',\n  ANIMATION_DURATION: 300,\n};\n\n/**\n * Error messages\n */\nexport const ERROR_MESSAGES = {\n  PDF_PROCESSING: 'Erro ao processar PDF. Verifique se o arquivo é válido.',\n  MICROPHONE_ACCESS: 'Erro ao acessar o microfone. Verifique as permissões.',\n  TRANSCRIPTION_FAILED: 'Erro ao transcrever o áudio. Tente novamente.',\n  CHAT_REQUEST_FAILED: 'Erro ao processar sua solicitação. Tente novamente.',\n  FILE_TOO_LARGE: 'Arquivo muito grande. Tamanho máximo permitido: 10MB.',\n  INVALID_FILE_TYPE: 'Tipo de arquivo não suportado. Apenas PDFs são aceitos.',\n};\n\n/**\n * Success messages\n */\nexport const SUCCESS_MESSAGES = {\n  PDF_UPLOADED: 'PDF carregado com sucesso!',\n  TRANSCRIPTION_COMPLETED: 'Transcrição concluída com sucesso!',\n};","metadata":{"source":"src/constants/index.js","section":"","chunkIndex":0,"totalChunks":1,"timestamp":1749598061112}}],["f99478e8-f7f2-48cb-a030-7c316ea225e4",{"pageContent":"# Material Tailwind: Pesquisa Extensiva e Guia Completo\n\nMaterial Tailwind é uma biblioteca de componentes que une o poder do Tailwind CSS com os princípios do Material Design, oferecendo **mais de 460 componentes** prontos para uso com mais de **3.1 milhões de instalações** no NPM e **53.000+ projetos ativos**. A biblioteca está disponível para React e HTML, mantendo total compatibilidade com Tailwind CSS v3 e oferecendo versões gratuita e Pro.\n\n## 1. Guia completo de instalação e configuração em projetos React\n\n### Pré-requisitos essenciais\nPara instalar Material Tailwind com sucesso, você precisa de Node.js v16.14.0 ou superior e um projeto React configurado. A biblioteca requer Tailwind CSS como dependência peer.\n\n### Processo de instalação passo a passo\n\n**Etapa 1: Instalar Tailwind CSS**\n```bash\n# Para Create React App ou projetos React existentes\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n```\n\n**Etapa 2: Instalar Material Tailwind React**\n```bash\nnpm install @material-tailwind/react\n# ou usando Yarn\nyarn add @material-tailwind/react\n```\n\n**Etapa 3: Configurar Tailwind com Material Tailwind**\n```javascript\n// tailwind.config.js\nconst withMT = require(\"@material-tailwind/react/utils/withMT\");\n\nmodule.exports = withMT({\n  content: [\"./src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n});\n```\n\n**Etapa 4: Adicionar diretivas Tailwind ao CSS**\n```css\n/* src/index.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n**Etapa 5: Configurar ThemeProvider**\n```javascript\n// src/index.js ou src/main.jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { ThemeProvider } from \"@material-tailwind/react\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n);\n```","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":0,"totalChunks":15,"timestamp":1749598061112}}],["31d04ba2-8726-4782-8acf-13631c2cf899",{"pageContent":"const root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>\n);\n```\n\n## 2. Lista completa de componentes disponíveis\n\n### Componentes de navegação\n- **Navbar**: Barras de navegação responsivas com suporte a dropdown\n- **Breadcrumbs**: Navegação hierárquica com separadores personalizáveis\n- **Sidebar**: Navegação lateral colapsável com menus multinível\n- **Menu**: Menus dropdown com posicionamento e aninhamento\n- **Mega Menu**: Menus grandes para estruturas complexas\n- **Pagination**: Navegação de páginas com botões personalizáveis\n- **Tabs**: Sistemas de abas horizontais e verticais\n\n### Componentes de formulário\n- **Input**: Campos de texto com variantes (outlined, filled, standard)\n- **Input Number**: Campos numéricos com controles de incremento\n- **Input Phone**: Entrada de telefone com seleção de código de país\n- **Textarea**: Entrada de texto multilinha com redimensionamento automático\n- **Select**: Seleção dropdown com busca e multi-seleção\n- **Checkbox**: Caixas de seleção simples e agrupadas\n- **Radio Button**: Grupos de botões de rádio\n- **Switch**: Interruptores de alternância\n- **Form**: Layouts completos de formulário com validação\n\n### Componentes de exibição de dados\n- **Table**: Tabelas avançadas com ordenação, paginação e busca\n- **Card**: Componentes de cartão versáteis com cabeçalhos e rodapés\n- **List**: Listas simples e complexas com seleção\n- **Avatar**: Avatares de usuário com indicadores de status\n- **Badge**: Badges de notificação com contadores\n- **Chip**: Elementos compactos para tags e filtros\n- **Typography**: Componentes de texto com hierarquia Material Design\n- **Timeline**: Linhas do tempo verticais","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":1,"totalChunks":15,"timestamp":1749598061112}}],["d07efc75-53ee-4559-ae18-c1cec8b13b96",{"pageContent":"### Componentes de feedback\n- **Alert**: Alertas de notificação com opções de descarte\n- **Progress Bar**: Indicadores de progresso lineares\n- **Spinner**: Spinners de carregamento em vários tamanhos\n- **Skeleton**: Placeholders de conteúdo para estados de carregamento\n- **Toast**: Mensagens de notificação temporárias\n- **Tooltip**: Informações ao passar o mouse\n\n### Componentes overlay e modal\n- **Dialog**: Diálogos modais com backdrop\n- **Drawer**: Painéis deslizantes de qualquer direção\n- **Popover**: Overlays de conteúdo posicionados\n- **Modal**: Implementações modais avançadas\n\n### Elementos interativos\n- **Button**: Botões primários, secundários, texto e ícone\n- **Button Group**: Coleções de botões agrupados\n- **Icon Button**: Botões circulares apenas com ícone\n- **Slider**: Sliders de intervalo com alças simples/duplas\n- **Rating Bar**: Componentes de classificação por estrelas\n- **Speed Dial**: Botão de ação flutuante com opções expansíveis\n\n### Componentes de layout\n- **Collapse**: Seções de conteúdo colapsáveis\n- **Accordion**: Painéis de conteúdo expansíveis\n- **Carousel**: Sliders de imagem/conteúdo\n- **Gallery**: Galerias de imagens com lightbox\n- **Stepper**: Indicadores de progresso passo a passo\n- **Footer**: Rodapés de site com várias opções de layout\n\n### Componentes Web 3.0\n- **Crypto Login**: Interfaces de conexão de carteira blockchain\n- **Crypto Card**: Cartões de exibição de criptomoedas\n- **Crypto Chart**: Visualização de dados de criptomoedas\n- **Crypto Modal**: Diálogos modais específicos para Web3\n- **Crypto Table**: Tabelas de transações blockchain\n\n## 3. Exemplos de código para cada componente\n\n### Implementação básica de Button\n```jsx\nimport { Button } from \"@material-tailwind/react\";","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":2,"totalChunks":15,"timestamp":1749598061112}}],["9c79ab3a-fa20-42ec-b41e-f6274105ca25",{"pageContent":"## 3. Exemplos de código para cada componente\n\n### Implementação básica de Button\n```jsx\nimport { Button } from \"@material-tailwind/react\";\n\nexport function ButtonExample() {\n  return (\n    <div className=\"flex gap-4\">\n      <Button>Default</Button>\n      <Button variant=\"gradient\">Gradient</Button>\n      <Button variant=\"outlined\">Outlined</Button>\n      <Button variant=\"text\">Text</Button>\n    </div>\n  );\n}\n```\n\n### Card avançado com múltiplas seções\n```jsx\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  Typography,\n  Button,\n} from \"@material-tailwind/react\";\n\nexport function CardExample() {\n  return (\n    <Card className=\"mt-6 w-96\">\n      <CardHeader color=\"blue-gray\" className=\"relative h-56\">\n        <img\n          src=\"https://images.unsplash.com/photo-1540553016722-983e48a2cd10\"\n          alt=\"card-image\"\n        />\n      </CardHeader>\n      <CardBody>\n        <Typography variant=\"h5\" color=\"blue-gray\" className=\"mb-2\">\n          UI/UX Review Check\n        </Typography>\n        <Typography>\n          The place is close to Barceloneta Beach and bus stop just 2 min by walk.\n        </Typography>\n      </CardBody>\n      <CardFooter className=\"pt-0\">\n        <Button>Read More</Button>\n      </CardFooter>\n    </Card>\n  );\n}\n```\n\n### Formulário com validação\n```jsx\nimport { Input, Button, Typography, Card } from \"@material-tailwind/react\";","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":3,"totalChunks":15,"timestamp":1749598061112}}],["f0c23c70-1a41-48f4-b729-c89bf75db9dd",{"pageContent":"### Formulário com validação\n```jsx\nimport { Input, Button, Typography, Card } from \"@material-tailwind/react\";\n\nexport function FormExample() {\n  return (\n    <Card color=\"transparent\" shadow={false}>\n      <Typography variant=\"h4\" color=\"blue-gray\">\n        Sign Up\n      </Typography>\n      <form className=\"mt-8 mb-2 w-80 max-w-screen-lg sm:w-96\">\n        <div className=\"mb-1 flex flex-col gap-6\">\n          <Typography variant=\"h6\" color=\"blue-gray\" className=\"-mb-3\">\n            Your Name\n          </Typography>\n          <Input\n            size=\"lg\"\n            placeholder=\"name@mail.com\"\n            className=\" !border-t-blue-gray-200 focus:!border-t-gray-900\"\n            labelProps={{\n              className: \"before:content-none after:content-none\",\n            }}\n          />\n        </div>\n        <Button className=\"mt-6\" fullWidth>\n          sign up\n        </Button>\n      </form>\n    </Card>\n  );\n}\n```\n\n## 4. Configuração específica para Vite e React\n\n### Criação de projeto Vite com React\n```bash\nnpm create vite@latest my-project -- --template react\ncd my-project\nnpm install\n```\n\n### Configuração do Vite (vite.config.js)\n```javascript\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  css: {\n    postcss: {\n      plugins: [\n        require('tailwindcss'),\n        require('autoprefixer'),\n      ],\n    }\n  }\n})\n```\n\n### Configuração Tailwind específica para Vite\n```javascript\n// tailwind.config.js\nconst withMT = require(\"@material-tailwind/react/utils/withMT\");\n\nmodule.exports = withMT({\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{vue,js,ts,jsx,tsx}\"\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n});\n```\n\n### Configuração para monorepo\n```javascript\nconst withMT = require(\"@material-tailwind/react/utils/withMT\");","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":4,"totalChunks":15,"timestamp":1749598061112}}],["85f6ebe6-9489-47bf-812d-cce547f8727d",{"pageContent":"### Configuração para monorepo\n```javascript\nconst withMT = require(\"@material-tailwind/react/utils/withMT\");\n\nmodule.exports = withMT({\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{js,ts,jsx,tsx}\",\n    \"path-to-your-node_modules/@material-tailwind/react/components/**/*.{js,ts,jsx,tsx}\",\n    \"path-to-your-node_modules/@material-tailwind/react/theme/components/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n});\n```\n\n## 5. Customização de temas e cores\n\n### Paletas de cores personalizadas\n```javascript\n// tailwind.config.js\nconst withMT = require(\"@material-tailwind/react/utils/withMT\");\n\nmodule.exports = withMT({\n  theme: {\n    colors: {\n      // Substituir cores padrão completamente\n      white: '#ffffff',\n      purple: '#3f3cbb',\n      midnight: '#121063',\n      tahiti: '#3ab7bf',\n      bermuda: '#78dcca',\n    },\n    extend: {\n      colors: {\n        // Adicionar cores personalizadas à paleta existente\n        'custom-blue': '#3252df',\n        sky: {\n          50: \"#f0f9ff\",\n          100: \"#e0f2fe\",\n          200: \"#bae6fd\",\n          300: \"#7dd3fc\",\n          400: \"#38bdf8\",\n          500: \"#0ea5e9\",\n          600: \"#0284c7\",\n          700: \"#0369a1\",\n          800: \"#075985\",\n          900: \"#0c4a6e\",\n        },\n      },\n    },\n  },\n  plugins: [],\n});\n```\n\n### Customização através do ThemeProvider\n```javascript\nimport { ThemeProvider } from \"@material-tailwind/react\";","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":5,"totalChunks":15,"timestamp":1749598061112}}],["4bc8ef5b-3608-4211-a985-3b9c3a3a33e5",{"pageContent":"### Customização através do ThemeProvider\n```javascript\nimport { ThemeProvider } from \"@material-tailwind/react\";\n\nconst customTheme = {\n  button: {\n    defaultProps: {\n      variant: \"filled\",\n      size: \"md\",\n      color: \"blue\",\n    },\n    styles: {\n      base: {\n        initial: {\n          verticalAlign: \"align-middle\",\n          fontFamily: \"font-sans\",\n          fontWeight: \"font-bold\",\n          textAlign: \"text-center\",\n          textTransform: \"uppercase\",\n          transition: \"transition-all\",\n          userSelect: \"select-none\",\n        },\n      },\n      variants: {\n        filled: {\n          blue: {\n            backgroud: \"bg-blue-500\",\n            color: \"text-white\",\n            shadow: \"shadow-md shadow-blue-500/10\",\n          },\n        },\n      },\n    },\n  },\n};\n\nexport default function App() {\n  return (\n    <ThemeProvider value={customTheme}>\n      {/* Your app components */}\n    </ThemeProvider>\n  );\n}\n```\n\n### Implementação de Dark Mode\n```javascript\n// tailwind.config.js\nmodule.exports = withMT({\n  darkMode: 'class', // ou 'media' para preferência automática do sistema\n  theme: {\n    extend: {\n      colors: {\n        // Definir cores para dark mode\n      },\n    },\n  },\n});\n```\n\n```javascript\n// Componente DarkModeToggle\nimport { useState, useEffect } from 'react';\nimport { Button } from \"@material-tailwind/react\";\n\nexport default function DarkModeToggle() {\n  const [darkMode, setDarkMode] = useState(false);\n\n  useEffect(() => {\n    if (darkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [darkMode]);\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 min-h-screen p-8\">\n      <Button \n        onClick={() => setDarkMode(!darkMode)}\n        className=\"dark:bg-blue-600 dark:text-white\"\n      >\n        Toggle Dark Mode\n      </Button>\n    </div>\n  );\n}\n```\n\n## 6. Melhores práticas de uso\n\n### Otimização de performance","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":6,"totalChunks":15,"timestamp":1749598061112}}],["d3345d46-b88c-45a6-8f84-8451d990131f",{"pageContent":"## 6. Melhores práticas de uso\n\n### Otimização de performance\n\n**Tree Shaking e Purging**\n```javascript\nmodule.exports = withMT({\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n    \"./node_modules/@material-tailwind/react/components/**/*.{js,ts,jsx,tsx}\",\n    \"./node_modules/@material-tailwind/react/theme/components/**/*.{js,ts,jsx,tsx}\",\n  ],\n});\n```\n\n**Importação otimizada de componentes**\n```javascript\n// ✅ Bom - Importações individuais\nimport { Button, Card, Typography } from \"@material-tailwind/react\";\n\n// ❌ Evitar - Importar toda a biblioteca\nimport * as MaterialTailwind from \"@material-tailwind/react\";\n```\n\n### Padrões de composição de componentes\n```javascript\nimport { Card, CardHeader, CardBody, CardFooter, Typography, Button } from \"@material-tailwind/react\";\n\nexport default function ProductCard({ product }) {\n  return (\n    <Card className=\"mt-6 w-96\">\n      <CardHeader color=\"blue-gray\" className=\"relative h-56\">\n        <img src={product.image} alt={product.name} />\n      </CardHeader>\n      <CardBody>\n        <Typography variant=\"h5\" color=\"blue-gray\" className=\"mb-2\">\n          {product.name}\n        </Typography>\n        <Typography>\n          {product.description}\n        </Typography>\n      </CardBody>\n      <CardFooter className=\"pt-0\">\n        <Button>Add to Cart</Button>\n      </CardFooter>\n    </Card>\n  );\n}\n```\n\n### Considerações de acessibilidade\n```javascript\nimport { Button, IconButton } from \"@material-tailwind/react\";\n\nexport default function AccessibleButton() {\n  return (\n    <>\n      <Button \n        aria-label=\"Submit form\"\n        className=\"w-full\"\n      >\n        Submit\n      </Button>\n      \n      <IconButton \n        aria-label=\"Close dialog\"\n        variant=\"text\"\n      >\n        <XMarkIcon className=\"h-5 w-5\" />\n      </IconButton>\n    </>\n  );\n}\n```\n\n### Abordagem mobile-first\n```javascript\nimport { Typography, Card } from \"@material-tailwind/react\";","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":7,"totalChunks":15,"timestamp":1749598061112}}],["4e66a18c-41a3-4482-bc96-a7940733e083",{"pageContent":"### Abordagem mobile-first\n```javascript\nimport { Typography, Card } from \"@material-tailwind/react\";\n\nexport default function ResponsiveCard() {\n  return (\n    <Card className=\"w-full max-w-sm mx-auto sm:max-w-md md:max-w-lg lg:max-w-xl\">\n      <Typography \n        variant=\"h4\" \n        className=\"text-center text-base sm:text-lg md:text-xl lg:text-2xl\"\n      >\n        Responsive Typography\n      </Typography>\n    </Card>\n  );\n}\n```\n\n## 7. Diferenças entre versões gratuitas e Pro\n\n| Recurso | Versão Gratuita | Versão Pro |\n|---------|-----------------|------------|\n| **Componentes** | 40+ componentes básicos | 300+ componentes premium |\n| **Blocks e Seções** | Seções pré-construídas limitadas | 100+ blocks prontos para uso |\n| **Templates** | Sem templates completos | 20+ templates de websites completos |\n| **Arquivos Figma** | Não incluídos | Sistema de design Figma completo |\n| **Componentes Avançados** | Exibição básica de dados | Tabelas avançadas, gráficos, calendários |\n| **Elementos Premium** | Apenas componentes padrão | Formulários complexos, dashboards, e-commerce |\n| **Suporte** | Apenas suporte da comunidade | Suporte prioritário por email |\n| **Atualizações** | Ciclo de lançamento padrão | Acesso antecipado a novos recursos |\n| **Licença Comercial** | Licença MIT (uso comercial gratuito) | Licença comercial estendida |\n| **Preço** | Gratuito (Licença MIT) | Pagamento único: $299 individual, $799 equipe |\n| **Ferramentas IA** | Não disponível | Geração de componentes com IA (V3 Pro) |\n| **Exportação de Código** | Copiar e colar manual | Ferramentas de exportação direta de código |","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":8,"totalChunks":15,"timestamp":1749598061112}}],["0519dd41-9979-4466-a531-1d517c457976",{"pageContent":"### Recursos exclusivos da versão Pro\n- **Componentes avançados de dashboard**: Widgets de análise, cartões KPI, gráficos avançados\n- **Templates de e-commerce**: Catálogos de produtos, carrinhos de compras, fluxos de checkout\n- **Páginas de autenticação**: Login, signup, redefinição de senha com múltiplas variantes\n- **Templates de landing page**: Páginas de marketing, landing pages SaaS, portfólios\n- **Blocks premium**: Seções hero, depoimentos, tabelas de preços, seções de equipe\n\n## 8. Compatibilidade com Tailwind CSS v3\n\n### Status atual de compatibilidade\n- **Versão Tailwind suportada**: v3.0+ (até v3.4.x)\n- **Versão mínima requerida**: Tailwind CSS v3.0\n- **Modo JIT**: Totalmente suportado e recomendado\n\n### Suporte ao modo JIT\n```javascript\n// tailwind.config.js\nmodule.exports = withMT({\n  mode: 'jit', // Habilitado por padrão em v3+\n  content: [\n    './src/**/*.{js,jsx,ts,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n});\n```\n\n### Integração com novos recursos do Tailwind v3\n\n**Suporte a valores arbitrários**\n```javascript\nimport { Button } from \"@material-tailwind/react\";\n\nexport default function ArbitraryValues() {\n  return (\n    <Button className=\"bg-[#1da1f2] text-[14px] p-[10px] rounded-[8px]\">\n      Custom Values\n    </Button>\n  );\n}\n```\n\n**Paleta de cores aprimorada**\nMaterial Tailwind suporta automaticamente a paleta expandida do Tailwind v3, incluindo cores como cyan, rose, fuchsia e lime por padrão.\n\n**Container Queries (v3.2+)**\n```javascript\n<Card className=\"@container\">\n  <div className=\"@sm:flex @md:grid-cols-2\">\n    {/* Responsivo ao tamanho do container */}\n  </div>\n</Card>\n```\n\n### Considerações de migração\n\n**De Tailwind v2 para v3**\n```bash\nnpm install -D tailwindcss@latest postcss@latest autoprefixer@latest\nnpm install @material-tailwind/react@latest\n```","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":9,"totalChunks":15,"timestamp":1749598061112}}],["7535a4c2-524f-4a6c-87a8-0f2e375695cd",{"pageContent":"### Considerações de migração\n\n**De Tailwind v2 para v3**\n```bash\nnpm install -D tailwindcss@latest postcss@latest autoprefixer@latest\nnpm install @material-tailwind/react@latest\n```\n\n**Atualizações de configuração**\n```javascript\n// Não usar mais 'purge', usar 'content' em vez disso\nmodule.exports = withMT({\n  content: ['./src/**/*.{js,jsx,ts,tsx}'], // era 'purge' em v2\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n});\n```\n\n## 9. Exemplos de layouts completos\n\n### Layout de Dashboard\n```jsx\nimport {\n  Card,\n  Typography,\n  List,\n  ListItem,\n  ListItemPrefix,\n  Accordion,\n  AccordionHeader,\n  AccordionBody,\n} from \"@material-tailwind/react\";\n\nexport function DashboardLayout() {\n  return (\n    <div className=\"flex\">\n      {/* Sidebar */}\n      <Card className=\"h-[calc(100vh-2rem)] w-full max-w-[20rem] p-4 shadow-xl shadow-blue-gray-900/5\">\n        <div className=\"mb-2 p-4\">\n          <Typography variant=\"h5\" color=\"blue-gray\">\n            Sidebar\n          </Typography>\n        </div>\n        <List>\n          <Accordion open={open === 1}>\n            <ListItem className=\"p-0\" selected={open === 1}>\n              <AccordionHeader onClick={() => handleOpen(1)} className=\"border-b-0 p-3\">\n                <ListItemPrefix>\n                  <PresentationChartBarIcon className=\"h-5 w-5\" />\n                </ListItemPrefix>\n                <Typography color=\"blue-gray\" className=\"mr-auto font-normal\">\n                  Dashboard\n                </Typography>\n              </AccordionHeader>\n            </ListItem>\n          </Accordion>\n        </List>\n      </Card>\n      \n      {/* Main Content */}\n      <div className=\"flex-1 p-4\">\n        <Typography variant=\"h4\" color=\"blue-gray\" className=\"mb-4\">\n          Dashboard\n        </Typography>\n        {/* Dashboard content */}\n      </div>\n    </div>\n  );\n}\n```","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":10,"totalChunks":15,"timestamp":1749598061112}}],["78527166-328b-4c09-a9de-90202f790be5",{"pageContent":"### Layout de E-commerce\n```jsx\nexport function EcommerceLayout() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <Navbar className=\"sticky top-0 z-10 h-max max-w-full rounded-none px-4 py-2 lg:px-8 lg:py-4\">\n        <div className=\"flex items-center justify-between text-blue-gray-900\">\n          <Typography as=\"a\" href=\"#\" className=\"mr-4 cursor-pointer py-1.5 font-medium\">\n            E-Shop\n          </Typography>\n          <div className=\"flex items-center gap-4\">\n            <Input type=\"search\" placeholder=\"Search...\" />\n            <IconButton variant=\"text\">\n              <ShoppingCartIcon className=\"h-5 w-5\" />\n            </IconButton>\n          </div>\n        </div>\n      </Navbar>\n\n      {/* Product Grid */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4\">\n          {/* Product cards */}\n        </div>\n      </div>\n    </div>\n  );\n}\n```","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":11,"totalChunks":15,"timestamp":1749598061112}}],["05ade37f-223d-43a1-bb22-3e60712b390e",{"pageContent":"### Layout de Landing Page\n```jsx\nexport function LandingPageLayout() {\n  return (\n    <>\n      {/* Hero Section */}\n      <div className=\"relative flex h-screen content-center items-center justify-center pt-16 pb-32\">\n        <div className=\"absolute top-0 h-full w-full bg-[url('/img/background-1.jpg')] bg-cover bg-center\" />\n        <div className=\"absolute top-0 h-full w-full bg-black/75 bg-cover bg-center\" />\n        <div className=\"max-w-8xl container relative mx-auto\">\n          <div className=\"flex flex-wrap items-center\">\n            <div className=\"ml-auto mr-auto w-full px-4 text-center lg:w-8/12\">\n              <Typography variant=\"h1\" color=\"white\" className=\"mb-6 font-black\">\n                Your story starts with us.\n              </Typography>\n              <Typography variant=\"lead\" color=\"white\" className=\"opacity-80\">\n                This is a simple example of a Landing Page you can build using\n                Material Tailwind. It features multiple CSS components\n              </Typography>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Features Section */}\n      <section className=\"-mt-32 bg-white px-4 pb-20 pt-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            {/* Feature cards */}\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n```\n\n## 10. Troubleshooting comum e soluções\n\n### Problema 1: Erros de configuração TypeScript\n\n**Solução para conflito de versão @types/react**\n```bash\n# Deletar node_modules e package-lock.json\nrm -rf node_modules package-lock.json\n\n# Downgrade da versão @types/react no package.json\n\"@types/react\": \"18.2.42\"  # Nota: Sem o símbolo ^\n\nnpm install\n```\n\n**Resolução de módulo em tsconfig.json**\n```json\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node\"\n  }\n}\n```\n\n### Problema 2: Conflitos com Tailwind CSS","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":12,"totalChunks":15,"timestamp":1749598061112}}],["b5d99e7f-7d63-466f-a95f-69e2ba08e0cb",{"pageContent":"npm install\n```\n\n**Resolução de módulo em tsconfig.json**\n```json\n{\n  \"compilerOptions\": {\n    \"moduleResolution\": \"node\"\n  }\n}\n```\n\n### Problema 2: Conflitos com Tailwind CSS\n\n**Solução para cores que param de funcionar após usar withMT()**\n```javascript\nconst withMT = require('@material-tailwind/react/utils/withMT');\n\nmodule.exports = withMT({\n  content: [\n    './index.html',\n    './src/**/*.{vue,js,ts,jsx,tsx}',\n    'path-to-your-node_modules/@material-tailwind/react/components/**/*.{js,ts,jsx,tsx}',\n    'path-to-your-node_modules/@material-tailwind/react/theme/components/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {}, // Não sobrescrever o tema padrão completamente\n  },\n  plugins: [],\n});\n```\n\n### Problema 3: Erros de build com Vite\n\n**Soluções comuns**\n\n**Limpar cache npm e reinstalar**\n```bash\nnpm cache clean --force\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n**Configuração Vite com PostCSS explícito**\n```javascript\n// vite.config.js\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport tailwindcss from 'tailwindcss'\n\nexport default defineConfig({\n  plugins: [react()],\n  css: {\n    postcss: {\n      plugins: [tailwindcss()],\n    },\n  }\n})\n```\n\n### Problema 4: Problemas de resolução de módulo\n\n**Downgrade de versão do pacote**\n```bash\nnpm install @material-tailwind/react@2.0.5  # Versão estável conhecida\n```\n\n**Verificar versões corretas no package.json**\n```json\n{\n  \"dependencies\": {\n    \"@material-tailwind/react\": \"^2.1.10\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"18.2.42\",\n    \"tailwindcss\": \"^3.3.0\"\n  }\n}\n```\n\n### Problema 5: Componentes interativos não funcionando\n\n**Adicionar script ripple para versão HTML**\n```html\n<!-- Para versão HTML -->\n<script async src=\"node_modules/@material-tailwind/html/scripts/ripple.js\"></script>\n<!-- ou CDN -->\n<script async src=\"https://unpkg.com/@material-tailwind/html@latest/scripts/ripple.js\"></script>\n```\n\n### Problema 6: Ícones Material não exibindo","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":13,"totalChunks":15,"timestamp":1749598061112}}],["cc0a27cb-1aa9-437b-bbb8-39585a020ee0",{"pageContent":"### Problema 6: Ícones Material não exibindo\n\n**Adicionar fonte Material Icons ao HTML**\n```html\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" />\n```\n\n## Recursos adicionais e links importantes\n\n### Documentação oficial\n- **React Docs**: https://www.material-tailwind.com/docs/react/installation\n- **HTML Docs**: https://www.material-tailwind.com/docs/html/installation\n- **GitHub Repository**: https://github.com/creativetimofficial/material-tailwind\n\n### Exemplos e templates\n- **Material Tailwind Dashboard React**: Template admin gratuito com 40+ componentes\n- **Material Tailwind Kit React**: UI kit com seções pré-construídas\n- **CodeSandbox Playground**: Editor online para Material Tailwind React/HTML\n- **Material Tailwind Blocks**: Coleção premium com 30+ novos blocks\n\nMaterial Tailwind oferece uma solução robusta para desenvolvedores que buscam combinar a estética do Material Design com a abordagem utility-first do Tailwind CSS. A versão gratuita fornece funcionalidade substancial para a maioria dos projetos, enquanto a versão Pro atende a necessidades comerciais avançadas com componentes e templates premium. A compatibilidade total com Tailwind CSS v3.x garante capacidades modernas de desenvolvimento web, embora os desenvolvedores devam monitorar as atualizações de compatibilidade com v4 para preparar seus projetos para o futuro.","metadata":{"source":"docs/Material-Tailwind-Guia-Completo.md","section":"","chunkIndex":14,"totalChunks":15,"timestamp":1749598061112}}],["bb0dfe74-098a-4ccc-ba60-a61b70a4c4ee",{"pageContent":"# Template Abrangente para CLAUDE CODE\n\n<env>\nAmbiente de desenvolvimento:\nSistema Operacional: [Especificar o sistema operacional]\nVersão do Node.js: [Especificar a versão]\nGerenciador de pacotes: [npm/yarn/pnpm]\nShell usado: [bash/zsh/powershell]\nDiretório de trabalho: [Caminho completo do diretório]\nRepositório Git: [Sim/Não]\nData atual: [Data atual]\nModelo: claude-3-7-sonnet-20250219\n</env>\n\n## Visão Geral do Projeto\n\n<project-info>\nNome do Projeto: [Nome do projeto]\nRepositório: [URL do repositório]\nDescrição: [Breve descrição do propósito e objetivos do projeto]\nLinguagens: [Listar linguagens de programação utilizadas]\nFrameworks: [Listar frameworks e suas versões]\nBibliotecas Principais: [Listar bibliotecas/dependências críticas]\nPlataforma: [web/mobile/desktop/multiplataforma]\n</project-info>\n\n## Comandos Essenciais\n\n```bash\n# Instalação e setup\n[Comando para instalar dependências]\n[Comando para configuração inicial]\n\n# Build\n[Comando para build em desenvolvimento]\n[Comando para build em produção]\n\n# Testes\n[Comando para testes unitários]\n[Comando para testes de integração]\n[Comando para testes end-to-end]\n\n# Lint e Verificação de Tipos\n[Comando para verificar linting]\n[Comando para verificar tipos]\n[Comando para formatar código]\n\n# Execução\n[Comando para iniciar em modo de desenvolvimento]\n[Comando para iniciar em modo de produção]\n\n# CI/CD\n[Comandos relacionados ao pipeline CI/CD]\n\n# Git\n[Comandos git específicos do projeto]\n```\n\n## Arquitetura do Sistema\n\n<architecture>\n[Detalhes sobre a arquitetura do sistema, incluindo:]\n- Padrões de design utilizados\n- Estrutura de camadas (frontend, backend, database)\n- Relações entre componentes\n- Fluxo de dados\n- Integrações externas\n- Diagramas de arquitetura (descrever verbalmente)\n\n[Descrever como os diferentes módulos se comunicam]\n[Incluir detalhes sobre API, eventos, mensageria]\n</architecture>\n\n## Estrutura do Repositório","metadata":{"source":".ondokai/onboarding.md","section":"","chunkIndex":0,"totalChunks":7,"timestamp":1749598061112}}],["9763c370-2fab-4871-838c-e73a99a2cfd6",{"pageContent":"[Descrever como os diferentes módulos se comunicam]\n[Incluir detalhes sobre API, eventos, mensageria]\n</architecture>\n\n## Estrutura do Repositório\n\n```\n[Estrutura de diretórios principal do projeto]\n├── [diretório1]/            # [Descrição do propósito]\n│   ├── [subdiretório1]/     # [Descrição]\n│   └── [subdiretório2]/     # [Descrição]\n├── [diretório2]/            # [Descrição do propósito]\n│   └── [arquivo-importante] # [Função deste arquivo]\n├── [config-files]           # [Configurações e seu propósito]\n└── [outros diretórios]      # [Descrição]\n```\n\n## Convenções de Código\n\n<code-conventions>\n### Estilo de Código\n- Indentação: [espaços/tabs, quantidade]\n- Comprimento máximo de linha: [número de caracteres]\n- Quotes: [simples/duplas]\n- Ponto-e-vírgula: [obrigatório/opcional]\n- Chaves: [mesma linha/nova linha]\n\n### Nomenclatura\n- Variáveis: [convenção, ex: camelCase]\n- Funções: [convenção, ex: camelCase]\n- Classes: [convenção, ex: PascalCase]\n- Constantes: [convenção, ex: UPPER_SNAKE_CASE]\n- Arquivos: [convenção, ex: kebab-case]\n- Componentes: [convenção específica]\n\n### Documentação\n- Estilo de comentários: [JSDoc/outros]\n- Requisitos para funções públicas: [o que documentar]\n- Formato de TODOs: [formato específico]\n\n### Padrões de Projeto\n- [Padrão específico 1]: [Como implementar no projeto]\n- [Padrão específico 2]: [Como implementar no projeto]\n</code-conventions>\n\n## Fluxo de Trabalho Git\n\n<git-workflow>\n### Branches\n- Branch principal: [main/master/outro]\n- Branch de desenvolvimento: [development/dev/outro]\n- Branches de feature: [formato, ex: feature/nome-da-feature]\n- Branches de fix: [formato, ex: fix/nome-do-bug]\n\n### Commits\n- Formato de mensagem: [ex: tipo(escopo): descrição]\n- Tipos aceitos: [feat/fix/docs/style/refactor/etc]\n- Tamanho máximo da mensagem: [caracteres]\n\n### Pull Requests\n- Template: [descrever elementos obrigatórios]\n- Processo de revisão: [quantos aprovadores, etc]\n- Critérios de merge: [testes passando, etc]","metadata":{"source":".ondokai/onboarding.md","section":"","chunkIndex":1,"totalChunks":7,"timestamp":1749598061112}}],["34fbf91a-34d3-4d37-9f17-7515ad9f13ee",{"pageContent":"### Pull Requests\n- Template: [descrever elementos obrigatórios]\n- Processo de revisão: [quantos aprovadores, etc]\n- Critérios de merge: [testes passando, etc]\n\n### CI/CD\n- Gatilhos: [quando os pipelines são executados]\n- Requisitos para merge: [verificações obrigatórias]\n</git-workflow>\n\n## Gerenciamento de Dependências\n\n<dependencies>\n### Dependências Críticas\n- [Dependência 1]: v[versão] - [propósito e uso]\n- [Dependência 2]: v[versão] - [propósito e uso]\n\n### Dependências de Desenvolvimento\n- [Dependência 1]: v[versão] - [propósito e uso]\n- [Dependência 2]: v[versão] - [propósito e uso]\n\n### Política de Atualização\n- [Frequência de atualizações]\n- [Processo para atualizações breaking change]\n- [Ferramentas utilizadas para monitorar]\n</dependencies>\n\n## Features e Funcionalidades\n\n<features>\n### Features Principais\n1. **[Nome da Feature 1]**\n   - Descrição: [o que faz]\n   - Componentes relacionados: [listagem]\n   - Arquivos principais: [caminhos]\n   - Dependências: [se houver]\n   - Detalhes técnicos: [implementação, algoritmos, etc]\n\n2. **[Nome da Feature 2]**\n   - [Mesma estrutura acima]\n\n### Features em Desenvolvimento\n1. **[Nome da Feature]**\n   - Status: [em progresso/planejada]\n   - Responsável: [nome]\n   - Escopo: [descrição]\n   - Prazo: [data estimada]\n</features>\n\n## Refatoração\n\n<refactoring>\n### Padrões de Refatoração\n- [Descrever padrões comuns usados para refatoração]\n- [Técnicas específicas para o projeto]\n\n### Áreas que Precisam de Refatoração\n- [Componente/Módulo]: [Razões e abordagem recomendada]\n- [Componente/Módulo]: [Razões e abordagem recomendada]\n\n### Histórico de Refatorações Importantes\n- [Data/PR]: [Descrição da refatoração e seus impactos]\n- [Data/PR]: [Descrição da refatoração e seus impactos]\n</refactoring>\n\n## Bugs Conhecidos e Workarounds","metadata":{"source":".ondokai/onboarding.md","section":"","chunkIndex":2,"totalChunks":7,"timestamp":1749598061112}}],["46541215-2918-404f-b514-44da373d4970",{"pageContent":"## Bugs Conhecidos e Workarounds\n\n<bugs>\n### Bugs Ativos\n1. **[Identificador/Título do Bug]**\n   - Sintomas: [comportamento observado]\n   - Reprodução: [passos para reproduzir]\n   - Causa raiz: [se conhecida]\n   - Workaround: [se disponível]\n   - Status: [em análise/aguardando fix/etc]\n   - Prioridade: [alta/média/baixa]\n\n2. **[Identificador/Título do Bug]**\n   - [Mesma estrutura acima]\n\n### Bugs Resolvidos Recentemente\n- [ID]: [Descrição breve] - Resolvido em [PR/commit]\n- [ID]: [Descrição breve] - Resolvido em [PR/commit]\n</bugs>\n\n## Compatibilidade de Pacotes\n\n<compatibility>\n### Versões de Pacotes Testadas\n- [Pacote 1]: Versões [x.y.z - a.b.c]\n- [Pacote 2]: Versões [x.y.z - a.b.c]\n\n### Conflitos Conhecidos\n- [Pacote 1] v[x.y.z] conflita com [Pacote 2] v[a.b.c]\n  - Sintomas: [descrição]\n  - Solução: [downgrade/upgrade/configuração]\n\n### Requisitos Específicos de Configuração\n- [Pacote]: [Configurações necessárias]\n- [Pacote]: [Configurações necessárias]\n\n### Estratégias de Migração\n- [Versão antiga] → [Versão nova]: [Passos para migração]\n- [Versão antiga] → [Versão nova]: [Passos para migração]\n</compatibility>\n\n## Configuração do Ambiente de Desenvolvimento\n\n<dev-environment>\n### Requisitos\n- [Software 1]: v[versão mínima]\n- [Software 2]: v[versão mínima]\n- [Hardware mínimo]\n\n### Configuração Passo a Passo\n1. [Passo 1 com comando/ação]\n2. [Passo 2 com comando/ação]\n...\n\n### Configurações Específicas\n- [Ferramenta/Software]: [Configuração recomendada]\n- [Ferramenta/Software]: [Configuração recomendada]\n\n### Containers e Virtualização\n- [Instruções para Docker/outras ferramentas]\n- [Links para arquivos de configuração]\n</dev-environment>\n\n## Documentação de API","metadata":{"source":".ondokai/onboarding.md","section":"","chunkIndex":3,"totalChunks":7,"timestamp":1749598061112}}],["d2559131-0677-48b8-bf18-86c34af2ba4a",{"pageContent":"### Containers e Virtualização\n- [Instruções para Docker/outras ferramentas]\n- [Links para arquivos de configuração]\n</dev-environment>\n\n## Documentação de API\n\n<api-docs>\n### [Nome do Endpoint/Grupo 1]\n- **[Método HTTP] [Caminho]**\n  - Descrição: [propósito]\n  - Parâmetros de Request:\n    - [nome]: [tipo] - [descrição]\n    - [nome]: [tipo] - [descrição]\n  - Body:\n    ```json\n    {\n      \"[campo]\": \"[tipo/exemplo]\",\n      \"[campo]\": \"[tipo/exemplo]\"\n    }\n    ```\n  - Resposta de Sucesso:\n    - Status: [código HTTP]\n    - Body:\n      ```json\n      {\n        \"[campo]\": \"[tipo/exemplo]\",\n        \"[campo]\": \"[tipo/exemplo]\"\n      }\n      ```\n  - Respostas de Erro:\n    - Status: [código HTTP] - [situação]\n    - Status: [código HTTP] - [situação]\n</api-docs>\n\n## Histórico e Evolução do Projeto\n\n<project-history>\n### Marcos Importantes\n- [Data]: [Versão X.Y.Z] - [Descrição da release e mudanças principais]\n- [Data]: [Versão X.Y.Z] - [Descrição da release e mudanças principais]\n\n### Decisões Arquiteturais Importantes\n- [Data/PR]: [Decisão] - [Razões e impactos]\n- [Data/PR]: [Decisão] - [Razões e impactos]\n\n### Roadmap\n- [Curto prazo]: [Objetivos e funcionalidades planejadas]\n- [Médio prazo]: [Objetivos e funcionalidades planejadas]\n- [Longo prazo]: [Objetivos e funcionalidades planejadas]\n</project-history>\n\n## Instruções para Mode de Pensamento Estendido\n\n<thinking-mode>\nUse as seguintes técnicas para ativar o modo de pensamento estendido do Claude CODE:\n\n- \"think\" - Ativa 4.000 tokens de pensamento\n- \"think hard\" ou \"think a lot\" ou \"think deeply\" - Ativa 10.000 tokens de pensamento \n- \"think harder\" ou \"think very hard\" - Ativa 31.999 tokens de pensamento\n- \"ultrathink\" ou \"megathink\" - Ativa o nível máximo de pensamento (31.999 tokens)\n\nUse essas técnicas para análises complexas de arquitetura, planejamento de features ou debugging de problemas difíceis.\n</thinking-mode>\n\n## Integração com MCP (Model Context Protocol)","metadata":{"source":".ondokai/onboarding.md","section":"","chunkIndex":4,"totalChunks":7,"timestamp":1749598061112}}],["7f203775-34e3-4053-ace5-e35ebe6e1934",{"pageContent":"Use essas técnicas para análises complexas de arquitetura, planejamento de features ou debugging de problemas difíceis.\n</thinking-mode>\n\n## Integração com MCP (Model Context Protocol)\n\n<mcp-config>\n### Servidores MCP Configurados\n- [Nome do servidor]: [Propósito e funcionalidade]\n  - Comando: [Comando para iniciar]\n  - Args: [Argumentos]\n  - Uso recomendado: [Quando e como usar]\n\n### Integrações Disponíveis\n- [Integração]: [Como acessar e utilizar]\n- [Integração]: [Como acessar e utilizar]\n\n### Configuração de Novos Servidores\n- [Instruções para configurar novos servidores MCP]\n- [Exemplo de configuração JSON]\n</mcp-config>\n\n## Comandos Personalizados\n\n<custom-commands>\n### Comandos do Projeto\n1. **[Nome do Comando]**\n   ```\n   [Definição do comando e o que ele faz]\n   [Passos que o Claude CODE deve seguir]\n   [Entradas esperadas e saídas desejadas]\n   ```\n\n2. **[Nome do Comando]**\n   ```\n   [Definição do comando e o que ele faz]\n   [Passos que o Claude CODE deve seguir]\n   [Entradas esperadas e saídas desejadas]\n   ```\n\n### Uso Recomendado\n- [Situação/Tarefa]: Use o comando [nome] para [resultado]\n- [Situação/Tarefa]: Use o comando [nome] para [resultado]\n</custom-commands>\n\n## Resolução de Problemas Comuns\n\n<troubleshooting>\n### Problemas de Build\n- **Sintoma**: [Descrição do problema]\n  - Causa provável: [Explicação]\n  - Solução: [Passos para resolver]\n\n### Problemas de Execução\n- **Sintoma**: [Descrição do problema]\n  - Causa provável: [Explicação]\n  - Solução: [Passos para resolver]\n\n### Problemas de Teste\n- **Sintoma**: [Descrição do problema]\n  - Causa provável: [Explicação]\n  - Solução: [Passos para resolver]\n</troubleshooting>\n\n## Recursos e Referências\n\n<resources>\n### Documentação Externa\n- [Nome do recurso]: [URL]\n- [Nome do recurso]: [URL]\n\n### Tutoriais Internos\n- [Nome do tutorial]: [Localização/URL]\n- [Nome do tutorial]: [Localização/URL]","metadata":{"source":".ondokai/onboarding.md","section":"","chunkIndex":5,"totalChunks":7,"timestamp":1749598061112}}],["8791455d-79d5-4137-94d5-3642383129af",{"pageContent":"<resources>\n### Documentação Externa\n- [Nome do recurso]: [URL]\n- [Nome do recurso]: [URL]\n\n### Tutoriais Internos\n- [Nome do tutorial]: [Localização/URL]\n- [Nome do tutorial]: [Localização/URL]\n\n### Ferramentas Recomendadas\n- [Nome da ferramenta]: [Propósito e URL]\n- [Nome da ferramenta]: [Propósito e URL]\n</resources>\n\n## Equipe e Contatos\n\n<team>\n### Desenvolvedores Principais\n- [Nome]: [Área de especialidade/responsabilidade, contato]\n- [Nome]: [Área de especialidade/responsabilidade, contato]\n\n### Proprietários de Módulos\n- [Módulo/Componente]: [Nome do responsável]\n- [Módulo/Componente]: [Nome do responsável]\n\n### Processo de Escalonamento\n- [Tipo de problema]: [Quem contatar, como]\n- [Tipo de problema]: [Quem contatar, como]\n</team>\n\n---\n\n**Notas Adicionais para o CLAUDE CODE:**\n\nEste template deve ser adaptado conforme as necessidades específicas do seu projeto. Seções podem ser removidas ou adicionadas de acordo com a complexidade e requisitos. Mantenha este arquivo atualizado conforme o projeto evolui para garantir que o CLAUDE CODE sempre tenha informações precisas sobre o contexto técnico.\n\nPara referências a diretórios ou arquivos específicos, use caminhos relativos à raiz do projeto para facilitar a navegação do CLAUDE CODE.\n\nUse o comando \"think hard\" quando precisar de análises mais profundas sobre arquitetura ou refatoração, e \"ultrathink\" para problemas particularmente complexos ou decisões críticas.\n\n@docs/detalhes-tecnicos.md\n@docs/guia-contribuicao.md\n@docs/seguranca.md","metadata":{"source":".ondokai/onboarding.md","section":"","chunkIndex":6,"totalChunks":7,"timestamp":1749598061112}}]],{"0":"a3029608-a8ce-4c62-882a-6eef7a8bea1c","1":"eedc3f60-0080-49a4-ad32-99fbe9d4b4c9","2":"779122b8-c2ed-4465-adfb-c91654e6288a","3":"52d0a74c-0d6b-4f7b-87d7-471a5fede645","4":"cea6cfeb-4278-4581-8c10-edc1e4bb70ed","5":"0631b01a-f92c-48ca-a12b-ee487e52170b","6":"f0e73574-df68-42a3-ab50-cb9ee837c837","7":"30b89a88-212f-400e-955b-066d34b8f93a","8":"0915b136-bf56-461f-ae03-b333c2375dbf","9":"40459c6e-7632-44a5-b144-36d4063bca6b","10":"987c9f0f-4c59-4939-ba48-fd99c84305f9","11":"3e97f6ec-2a56-4756-ab9e-bfe291526f78","12":"433a4554-95ba-4fc7-a2bd-b6e258e347e8","13":"f20bdfe1-c4e5-4b46-bd7f-d2c0bcd6068d","14":"c09910ef-c66e-4353-9187-48d593df6077","15":"eea43b53-c82a-4aef-aa62-279aeef2d827","16":"abbba4d3-86f6-489f-9314-7fd884587d65","17":"8137be1e-c09d-40b9-8e2d-c8e81d8ee538","18":"50da80e8-ca18-42ce-b6ff-e80c3720aa94","19":"269d873a-eadc-4ac6-82ee-c1a0dd9d6e70","20":"56e4ee90-7a23-45b4-a81c-09ef5f690203","21":"45f932a2-3d1c-4a4e-9448-b28a1c7ecbaa","22":"c60dc729-0132-4ba2-a7c4-e12496819c18","23":"fde629f2-1266-4203-be7f-2947e083ed56","24":"316deeb6-acdf-400a-9ebb-99bbe2488407","25":"16c4991a-ba35-4bed-88ae-cbc375ad1636","26":"c07cdf14-a28f-4bec-95b4-33b5a7fc53cf","27":"f99478e8-f7f2-48cb-a030-7c316ea225e4","28":"31d04ba2-8726-4782-8acf-13631c2cf899","29":"d07efc75-53ee-4559-ae18-c1cec8b13b96","30":"9c79ab3a-fa20-42ec-b41e-f6274105ca25","31":"f0c23c70-1a41-48f4-b729-c89bf75db9dd","32":"85f6ebe6-9489-47bf-812d-cce547f8727d","33":"4bc8ef5b-3608-4211-a985-3b9c3a3a33e5","34":"d3345d46-b88c-45a6-8f84-8451d990131f","35":"4e66a18c-41a3-4482-bc96-a7940733e083","36":"0519dd41-9979-4466-a531-1d517c457976","37":"7535a4c2-524f-4a6c-87a8-0f2e375695cd","38":"78527166-328b-4c09-a9de-90202f790be5","39":"05ade37f-223d-43a1-bb22-3e60712b390e","40":"b5d99e7f-7d63-466f-a95f-69e2ba08e0cb","41":"cc0a27cb-1aa9-437b-bbb8-39585a020ee0","42":"bb0dfe74-098a-4ccc-ba60-a61b70a4c4ee","43":"9763c370-2fab-4871-838c-e73a99a2cfd6","44":"34fbf91a-34d3-4d37-9f17-7515ad9f13ee","45":"46541215-2918-404f-b514-44da373d4970","46":"d2559131-0677-48b8-bf18-86c34af2ba4a","47":"7f203775-34e3-4053-ace5-e35ebe6e1934","48":"8791455d-79d5-4137-94d5-3642383129af"}]